<#@ template language="C#" hostspecific="true" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ Output Extension="cs" #>
<#+
void MockAssembly(string assemblyPath, params string[] targetNamespaces)
{
	var assembly = Assembly.Load(File.ReadAllBytes(assemblyPath));
	var interfaces = assembly.GetTypes().Where(type => type.IsInterface);

    foreach (var @interface in interfaces)
	{
    	if (targetNamespaces.Count() > 0 && !targetNamespaces.Any(@namespace => @interface.Namespace == @namespace || @interface.Namespace.StartsWith(@namespace + ".")))
        	continue;
    
		string className = GetMockName(@interface);
    	var methodBodyNames = new List<string>();
#>
using System;

namespace <#= @interface.Namespace #>.Mocks
{
	using <#= @interface.Namespace #>;
	
	public partial class <#= className #> : <#= @interface.Name #>
	{
<#+ 	foreach (var member in @interface.GetMembers()) 
		{
            if (member.MemberType == MemberTypes.Property)
            {
            	var propertyInfo = (PropertyInfo)member;
            	var returnType = GetTypeString(propertyInfo.PropertyType);
#>
		public <#= returnType #> <#= propertyInfo.Name #> { get; set; }
<#+
            }
            else if (member.MemberType == MemberTypes.Method)
            {
                var methodInfo = (MethodInfo)member;
                
                if (methodInfo.IsSpecialName) continue;
                
                var returnType = GetTypeString(methodInfo.ReturnType);
                var parameters = 
                    methodInfo
                        .GetParameters()
                        .Select(parameter => new
                        {
                            Type = GetTypeString(parameter.ParameterType),
                            Name = parameter.Name
                        });
                
                string parameterTypesString = string.Join(", ", parameters.Select(parameter => parameter.Type));
                string parameterNamesString = string.Join(", ", parameters.Select(parameter => parameter.Name));
                string signatureString = string.Join(", ", parameters.Select(parameter => parameter.Type + " " + parameter.Name));
                string methodBodyName = methodInfo.Name + "Body";
                
                methodBodyNames.Add(methodBodyName);
                
                if (methodInfo.ReturnType == typeof(void))
                {
#>
		public Action<#= string.IsNullOrWhiteSpace(parameterTypesString) ? "" : string.Format("<{0}>", parameterTypesString) #> <#= methodBodyName #> { get; set; }
		public void <#= methodInfo.Name #>(<#= signatureString #>)
		{
			<#= methodBodyName #>(<#= parameterNamesString #>);
		}
<#+
                }
                else
                {
#>
		public Func<<#= string.IsNullOrWhiteSpace(parameterTypesString) ? "" : parameterTypesString + ", " #><#= returnType #>> <#= methodInfo.Name #>Body { get; set; }
		public <#= returnType #> <#= methodInfo.Name #>(<#= signatureString #>)
		{
			return <#= methodInfo.Name #>Body(<#= parameterNamesString #>);
		}
<#+
                }
            }
		}
#>
	}
}
<#+
	}
}

string GetTypeString(Type type)
{
    if (type == typeof(bool))
        return "bool";
    else if (type == typeof(byte))
        return "byte";
    else if (type == typeof(sbyte))
        return "sbyte";
    else if (type == typeof(char))
        return "char";
    else if (type == typeof(decimal))
        return "decimal";
    else if (type == typeof(double))
        return "double";
    else if (type == typeof(float))
        return "float";
    else if (type == typeof(int))
        return "int";
    else if (type == typeof(uint))
        return "uint";
    else if (type == typeof(long))
        return "long";
    else if (type == typeof(ulong))
        return "ulong";
    else if (type == typeof(object))
        return "object";
    else if (type == typeof(short))
        return "short";
    else if (type == typeof(ushort))
        return "ushort";
    else if (type == typeof(string))
        return "string";
    else if (type == typeof(void))
        return "void";
    
    return Regex.Replace(type.ToString(), @"`\d", "")
                .Replace("[", "<")
                .Replace("]", ">");
}
 
string GetMockName(Type interfaceType)
{
    string name = interfaceType.Name;
    
    if (name.StartsWith("I"))
        name = name.Substring(1);
        
    return "Mock" + name;
}
#>